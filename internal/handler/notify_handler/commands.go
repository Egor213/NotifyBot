package notifyhandler

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/Egor213/notifyBot/internal/entity"
	"github.com/Egor213/notifyBot/internal/service/srverrs"
	"github.com/Egor213/notifyBot/pkg/validation"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (h *NotificationHandler) handleStatus(_ context.Context, msg *tgbotapi.Message) (string, entity.ReplyMarkup) {
	return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ üü¢", nil
}

func (h *NotificationHandler) handleViewSettings(ctx context.Context, msg *tgbotapi.Message) (string, entity.ReplyMarkup) {

	settings, err := h.NotifyServ.GetSettings(ctx, msg.Chat.ID)
	if err != nil {
		switch {
		case errors.Is(err, srverrs.ErrGetNotifySettings):
			return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", nil
		default:
			return fmt.Sprintf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: %v", err), nil
		}
	}

	if len(settings) == 0 {
		return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.", nil
	}

	serviceMap := make(map[string][]string)
	for _, s := range settings {
		serviceMap[s.Service] = append(serviceMap[s.Service], string(s.Level))
	}

	var lines []string
	for svc, levels := range serviceMap {
		lines = append(lines, fmt.Sprintf("–°–µ—Ä–≤–∏—Å: %s | –£—Ä–æ–≤–Ω–∏: %s", svc, strings.Join(levels, ", ")))
	}

	return "–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n" + strings.Join(lines, "\n"), nil
}

func (h *NotificationHandler) handleSetSettings(ctx context.Context, msg *tgbotapi.Message) (string, entity.ReplyMarkup) {
	args := strings.Fields(msg.CommandArguments())
	if len(args) == 0 {
		return "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_notify_settings service1,service2 [level1,level2]", nil
	}

	services, err := validation.ParseServices(args[0])
	if err != nil {
		return "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–ø–∏—Å–∞—Ç—å —Ö–æ—Ç—è –±—ã 1 —Å–µ—Ä–≤–∏—Å.", nil
	}

	var levels []entity.LogLevel
	if len(args) > 1 {
		levels, err = validation.ParseLogLevels(args[1])
		if err != nil {
			return fmt.Sprintf("–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: %v", err), nil
		}
	} else {
		levels, _ = validation.ParseLogLevels("")
	}

	if err := h.NotifyServ.SetSettings(ctx, msg.Chat.ID, services, levels); err != nil {
		return fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: %v", err), nil
	}

	return "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ‚úÖ", nil
}

func (h *NotificationHandler) handleRemoveSettings(ctx context.Context, msg *tgbotapi.Message) (string, entity.ReplyMarkup) {
	args := strings.Fields(msg.CommandArguments())
	if len(args) != 2 {
		return "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /del_notify_settings service level", nil
	}

	level, ok := entity.ParseLogLevel(strings.ToUpper(args[1]))
	if !ok {
		return fmt.Sprintf("–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤: %s", args[1]), nil
	}

	if err := h.NotifyServ.RemoveSettings(ctx, msg.Chat.ID, args[0], level); err != nil {
		switch {
		case errors.Is(err, srverrs.ErrNotifySettingNotFound):
			return "–£–∫–∞–∑–∞–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", nil
		case errors.Is(err, srverrs.ErrRemoveNotifySettings):
			return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", nil
		default:
			return fmt.Sprintf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: %v", err), nil
		}
	}

	return "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ ‚úÖ", nil
}
